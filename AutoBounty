local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local PlaceId =game.PlaceId

if not player.Character then
	ReplicatedStorage.Remotes.CommF_:InvokeServer("SetTeam", getgenv().Setting.Team)
	player.CharacterAdded:Wait()
end

local function checkPvpAndHop()	
	local pvp = player:GetAttribute("PvpDisabled")
	if pvp == true then
		pcall(function()
			game:GetService("TeleportService"):Teleport(PlaceId, player)
		end)
	end
end

pcall(function()
	player.CharacterAdded:Connect(checkPvpAndHop)
end)

local currentTarget = nil

local function isInSafeZone(plr)
	if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
		return false
	end
	local root = plr.Character.HumanoidRootPart
	local safeZones = workspace:FindFirstChild("_WorldOrigin") and workspace._WorldOrigin:FindFirstChild("SafeZones")
	if not safeZones then return false end

	for _, zone in ipairs(safeZones:GetChildren()) do
		if zone:IsA("BasePart") and zone.Shape == Enum.PartType.Ball then
			local distance = (root.Position - zone.Position).Magnitude
			if distance <= zone.Size.X / 2 then  -- 球体の半径
				return true
			end
		end
	end
	return false
end

local function findNewTarget()
	local myLevel = player:FindFirstChild("Data") and player.Data:FindFirstChild("Level")
	if not myLevel then return nil end

	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= player and plr.Character and plr.Character:FindFirstChild("Humanoid") then
			local humanoid = plr.Character.Humanoid
			local pvp = plr:GetAttribute("PvpDisabled")
			local targetLevel = plr:FindFirstChild("Data") and plr.Data:FindFirstChild("Level")

			if plr == currentTarget then
				if humanoid.Health > 0 then
					return plr 
				else
					continue
				end
			end

			if (pvp == nil or pvp == false) and targetLevel and not isInSafeZone(plr) then
				local myLv = myLevel.Value
				local tLv = targetLevel.Value
				local diff = math.abs(myLv - tLv)
				local threshold = myLv * 0.25

				if diff <= threshold then
					return plr
				end
			end
		end
	end
	return nil
end

local function isTargetAlive(target)
	if not target.Character or not target.Character:FindFirstChild("Humanoid") then return false end
	if target.Character.Humanoid.Health <= 0 then return false end
	return true
end

RunService.Heartbeat:Connect(function(dt)
	if not currentTarget or not isTargetAlive(currentTarget) then
		currentTarget = findNewTarget()
	else
		local myChar = player.Character
		if myChar and myChar:FindFirstChild("HumanoidRootPart") and currentTarget.Character and currentTarget.Character:FindFirstChild("HumanoidRootPart") then
			myChar.HumanoidRootPart.CFrame = currentTarget.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
		end
	end
end)

function EquipTool(Tool)
	pcall(function()
		game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack[Tool])
	end)
end

local SelectWeapon = "Blox Fruit"
spawn(function()
	while wait() do
		for i ,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
			if v.ToolTip == SelectWeapon then
				SelectWeapon = v.Name
				if not game:GetService("Players").LocalPlayer.Character:FindFirstChild(SelectWeapon) then
					EquipTool(SelectWeapon)
				end
			end
		end
	end
end)

local function IsEntityAlive(entity)
	if not entity then return false end
	local humanoid = entity:FindFirstChild("Humanoid")
	return humanoid and humanoid.Health > 0
end

local function GetEnemiesInRange(character, range)
	local enemies = game:GetService("Workspace").Enemies:GetChildren()
	local players = game:GetService("Players"):GetPlayers()
	local targets = {}
	local playerPos = character:GetPivot().Position
	for _, enemy in ipairs(enemies) do
		local rootPart = enemy:FindFirstChild("HumanoidRootPart")
		if rootPart and IsEntityAlive(enemy) then
			local distance = (rootPart.Position - playerPos).Magnitude
			if distance <= range then
				table.insert(targets, enemy)
			end
		end
	end
	for _, otherPlayer in ipairs(players) do
		if otherPlayer ~= player and otherPlayer.Character then
			local rootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
			if rootPart and IsEntityAlive(otherPlayer.Character) then
				local distance = (rootPart.Position - playerPos).Magnitude
				if distance <= range then
					table.insert(targets, otherPlayer.Character)
				end
			end
		end
	end
	return targets
end

local attackRange
local function attackNoCoolDown()
	local character = player.Character
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end
	local equippedWeapon
	for _, item in ipairs(character:GetChildren()) do
		if item:IsA("Tool") then
			equippedWeapon = item
			break
		end
	end
	if not equippedWeapon then return end
	if hrp:FindFirstChild("Buddha") then
		attackRange =1000
	else
		attackRange =60
	end
	local enemiesInRange = GetEnemiesInRange(character, attackRange)
	if equippedWeapon:FindFirstChild("LeftClickRemote") then
		local attackCount = 1  
		for _, enemy in ipairs(enemiesInRange) do
			local rootPart = enemy:FindFirstChild("HumanoidRootPart")
			if rootPart then
				local direction = (rootPart.Position - character:GetPivot().Position).Unit
				equippedWeapon.LeftClickRemote:FireServer(direction, attackCount)
				attackCount = attackCount + 1
			end
		end
	else
		local targets, mainTarget = {}, nil
		for _, enemy in ipairs(enemiesInRange) do
			if not enemy:GetAttribute("IsBoat") then
				local head = enemy:FindFirstChild("Head")
				if head then
					table.insert(targets, { enemy, head })
					mainTarget = head
				end
			end
		end
		if mainTarget then
			local attackEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterAttack")
			local hitEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterHit")
			pcall(function()
				attackEvent:FireServer(0.1)
				hitEvent:FireServer(mainTarget, targets)
			end)
		end
	end
end
task.spawn(function()
	while task.wait(0.1) do
		attackNoCoolDown()
	end
end)

task.spawn(function()
	while task.wait(1) do    
		pcall(function()
			game:GetService("ReplicatedStorage").Remotes.CommE:FireServer("ActivateAbility")
		end)
	end
end)

task.spawn(function()
	while task.wait(1) do
		local character = game.Players.LocalPlayer.Character
		if character and character:FindFirstChild("RaceEnergy") and
			character.RaceEnergy.Value >= 1 and
			not character.RaceTransformed.Value then
			local be = game:GetService("VirtualInputManager")
			be:SendKeyEvent(true, "Y", false, game)
			task.wait(0.1)
			be:SendKeyEvent(false, "Y", false, game)
		end
	end
end)

local function setupSitPrevention(char)
	local hum = char:WaitForChild("Humanoid")
	if not hum then return end

	hum:GetPropertyChangedSignal("Sit"):Connect(function()
		if hum.Sit then
			task.spawn(function()
				repeat
					task.wait(0.1)
					pcall(function()
						hum:ChangeState(Enum.HumanoidStateType.Jumping)
					end)
				until not hum.Sit or not hum.Parent
			end)
		end
	end)
end

if player.Character then setupSitPrevention(player.Character) end
player.CharacterAdded:Connect(setupSitPrevention)
