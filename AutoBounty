local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local PlaceId =game.PlaceId

local FILE_PATH = "BloxFruits/BountyTracker.json"
local trackerData = {
	initialBounty = 0,
	startTime = 0
}

player:WaitForChild("DataLoaded", 30)

local function saveTracker()
	pcall(function()
		if writefile then
			writefile(FILE_PATH, HttpService:JSONEncode(trackerData))
		end
	end)
end

local function loadTracker()
	local bounty = player:WaitForChild("leaderstats", 10):WaitForChild("Bounty/Honor", 10)
	trackerData.initialBounty = bounty and bounty.Value or 0
	trackerData.startTime = tick()
	saveTracker()
end

local function getCurrentBounty()
	local bounty = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Bounty/Honor")
	return bounty and bounty.Value or trackerData.initialBounty
end

local function getBountyIncrease()
	return getCurrentBounty() - trackerData.initialBounty
end

local function getElapsedTime()
	local elapsed = tick() - trackerData.startTime
	local minutes = math.floor(elapsed / 60)
	local seconds = math.floor(elapsed % 60)
	return string.format("%02d:%02d", minutes, seconds)
end

local function resetTracker()
	local bounty = player:WaitForChild("leaderstats", 10):WaitForChild("Bounty/Honor", 10)
	trackerData.initialBounty = bounty and bounty.Value or 0
	trackerData.startTime = tick()
	saveTracker()
end

loadTracker()

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BountyTrackerGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 280, 0, 140)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 2
frame.BorderColor3 = Color3.fromRGB(100, 100, 255)
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "賞金トラッカー"
title.TextColor3 = Color3.fromRGB(100, 200, 255)
title.Font = Enum.Font.GothamBold
title.TextScaled = true
title.Parent = frame

local bountyLabel = Instance.new("TextLabel")
bountyLabel.Name = "BountyLabel"
bountyLabel.Size = UDim2.new(1, -10, 0, 30)
bountyLabel.Position = UDim2.new(0, 5, 0, 35)
bountyLabel.BackgroundTransparency = 1
bountyLabel.Text = "増加: 計算中..."
bountyLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
bountyLabel.Font = Enum.Font.Gotham
bountyLabel.TextXAlignment = Enum.TextXAlignment.Left
bountyLabel.Parent = frame

local timeLabel = Instance.new("TextLabel")
timeLabel.Name = "TimeLabel"
timeLabel.Size = UDim2.new(1, -10, 0, 30)
timeLabel.Position = UDim2.new(0, 5, 0, 65)
timeLabel.BackgroundTransparency = 1
timeLabel.Text = "時間: 00:00"
timeLabel.TextColor3 = Color3.fromRGB(255, 255, 100)
timeLabel.Font = Enum.Font.Gotham
timeLabel.TextXAlignment = Enum.TextXAlignment.Left
timeLabel.Parent = frame

local resetButton = Instance.new("TextButton")
resetButton.Size = UDim2.new(0, 80, 0, 30)
resetButton.Position = UDim2.new(1, -90, 1, -35)
resetButton.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
resetButton.Text = "リセット"
resetButton.TextColor3 = Color3.new(1, 1, 1)
resetButton.Font = Enum.Font.GothamBold
resetButton.Parent = frame

resetButton.MouseButton1Click:Connect(function()
	resetTracker()
end)

RunService.Heartbeat:Connect(function()
	local inc = getBountyIncrease()
	bountyLabel.Text = "増加: +" .. inc .. " Bounty"
	if inc > 0 then
		bountyLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
	elseif inc < 0 then
		bountyLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
	else
		bountyLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
	end

	timeLabel.Text = "時間: " .. getElapsedTime()
end)

if not player.Character then
	ReplicatedStorage.Remotes.CommF_:InvokeServer("SetTeam", getgenv().Setting.Team)
	player.CharacterAdded:Wait()
end

local function checkPvpAndHop()	
	print("死んじゃったー")
	local pvp = player:GetAttribute("PvpDisabled")
	print(pvp)
	if pvp == true then
		pcall(function()
			game:GetService("TeleportService"):Teleport(PlaceId, player)
		end)
	end
end

player.CharacterAdded:Connect(checkPvpAndHop)

local currentTarget = nil

local function isInSafeZone(plr)
	if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
		return false
	end
	local root = plr.Character.HumanoidRootPart
	local safeZones = workspace:FindFirstChild("_WorldOrigin") and workspace._WorldOrigin:FindFirstChild("SafeZones")
	if not safeZones then return false end

	for _, zone in ipairs(safeZones:GetChildren()) do
		local distance = (root.Position - zone.Position).Magnitude
		if distance <= zone.Size.X / 2 then 
			return true
		end
	end
	return false
end

local targetStartTime = 0
local TARGET_TIMEOUT = 35
local blacklist = {}

local function isInBlacklist(plr)
	return blacklist[plr] == true
end

local function addToBlacklist(plr)
	blacklist[plr] = true
end

local function findNewTarget()
	local myLevel = player:FindFirstChild("Data") and player.Data:FindFirstChild("Level")
	if not myLevel then return nil end

	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= player and plr.Character and plr.Character:FindFirstChild("Humanoid") then
			local hum = plr.Character.Humanoid
			local pvp = plr:GetAttribute("PvpDisabled")
			local targetLevel = plr:FindFirstChild("Data") and plr.Data:FindFirstChild("Level")

			if plr == currentTarget then
				if hum.Health > 0 then return plr end
				continue
			end
			
			if isInBlacklist(plr) then continue end
			
			if (pvp == nil or pvp == false) and targetLevel and not isInSafeZone(plr) then
				local diff = math.abs(myLevel.Value - targetLevel.Value)
				if diff <= myLevel.Value * 0.25 then
					return plr
				end
			end
		end
	end
	return nil
end

local function isTargetAlive(target)
	return target.Character and target.Character:FindFirstChild("Humanoid") and target.Character.Humanoid.Health > 0
end

local function isInCombat()
	local gui = player:FindFirstChild("PlayerGui")
	if not gui then return false end
	local main = gui:FindFirstChild("Main")
	if not main then return false end
	local hud = main:FindFirstChild("BottomHUDList")
	if not hud then return false end
	local combat = hud:FindFirstChild("InCombatBottom")
	if not combat then return false end
	return combat.Visible == true
end

RunService.Heartbeat:Connect(function()
	local now = tick()
	
	if currentTarget then
		if not isTargetAlive(currentTarget) then
			addToBlacklist(currentTarget)
			currentTarget = nil
			targetStartTime = 0
		elseif now - targetStartTime >= TARGET_TIMEOUT then
			addToBlacklist(currentTarget)
			currentTarget = nil
			targetStartTime = 0
		end
	end

	if not currentTarget then
		currentTarget = findNewTarget()
		if currentTarget then
			targetStartTime = now
		else
			if not isInCombat() then
				pcall(function()
					game:GetService("TeleportService"):Teleport(PlaceId, player)
				end)
			end
			return
		end
	end

	local myChar = player.Character
	local targetChar = currentTarget.Character
	if myChar and myChar:FindFirstChild("HumanoidRootPart") and targetChar and targetChar:FindFirstChild("HumanoidRootPart") then
		myChar.HumanoidRootPart.CFrame = targetChar.HumanoidRootPart.CFrame + Vector3.new(0, -0.5, 0)
	end
end)

local START_TIME = tick() 
local HOP_AFTER_MINUTES = 5 

spawn(function()
	while task.wait(1)  do
		local elapsed = tick() - START_TIME
		if elapsed >= HOP_AFTER_MINUTES * 60 then
			pcall(function()
				game:GetService("TeleportService"):Teleport(PlaceId, player)
			end)
			break  
		end 
	end
end)

function EquipTool(Tool)
	pcall(function()
		game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack[Tool])
	end)
end

local SelectWeapon = "Blox Fruit"
spawn(function()
	while wait() do
		for i ,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
			if v.ToolTip == SelectWeapon then
				SelectWeapon = v.Name
				EquipTool(SelectWeapon)
			end
		end
	end
end)

local function IsEntityAlive(entity)
	if not entity then return false end
	local humanoid = entity:FindFirstChild("Humanoid")
	return humanoid and humanoid.Health > 0
end

local function GetEnemiesInRange(character, range)
	local enemies = game:GetService("Workspace").Enemies:GetChildren()
	local players = game:GetService("Players"):GetPlayers()
	local targets = {}
	local playerPos = character:GetPivot().Position
	for _, enemy in ipairs(enemies) do
		local rootPart = enemy:FindFirstChild("HumanoidRootPart")
		if rootPart and IsEntityAlive(enemy) then
			local distance = (rootPart.Position - playerPos).Magnitude
			if distance <= range then
				table.insert(targets, enemy)
			end
		end
	end
	for _, otherPlayer in ipairs(players) do
		if otherPlayer ~= player and otherPlayer.Character then
			local rootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
			if rootPart and IsEntityAlive(otherPlayer.Character) then
				local distance = (rootPart.Position - playerPos).Magnitude
				if distance <= range then
					table.insert(targets, otherPlayer.Character)
				end
			end
		end
	end
	return targets
end

local attackRange
local function attackNoCoolDown()
	local character = player.Character
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end
	local equippedWeapon
	for _, item in ipairs(character:GetChildren()) do
		if item:IsA("Tool") then
			equippedWeapon = item
			break
		end
	end
	if not equippedWeapon then return end
	if hrp:FindFirstChild("Buddha") then
		attackRange =1000
	else
		attackRange =60
	end
	local enemiesInRange = GetEnemiesInRange(character, attackRange)
	if equippedWeapon:FindFirstChild("LeftClickRemote") then
		local attackCount = 1  
		for _, enemy in ipairs(enemiesInRange) do
			local rootPart = enemy:FindFirstChild("HumanoidRootPart")
			if rootPart then
				local direction = (rootPart.Position - character:GetPivot().Position).Unit
				equippedWeapon.LeftClickRemote:FireServer(direction, attackCount)
				attackCount = attackCount + 1
			end
		end
	else
		local targets, mainTarget = {}, nil
		for _, enemy in ipairs(enemiesInRange) do
			if not enemy:GetAttribute("IsBoat") then
				local head = enemy:FindFirstChild("Head")
				if head then
					table.insert(targets, { enemy, head })
					mainTarget = head
				end
			end
		end
		if mainTarget then
			local attackEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterAttack")
			local hitEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterHit")
			pcall(function()
				attackEvent:FireServer(0.1)
				hitEvent:FireServer(mainTarget, targets)
			end)
		end
	end
end
task.spawn(function()
	while task.wait(0.1) do
		attackNoCoolDown()
	end
end)

task.spawn(function()
	while task.wait(1) do    
		pcall(function()
			game:GetService("ReplicatedStorage").Remotes.CommE:FireServer("ActivateAbility")
		end)
	end
end)

task.spawn(function()
	while task.wait(1) do
		local character = game.Players.LocalPlayer.Character
		if character and character:FindFirstChild("RaceEnergy") and
			character.RaceEnergy.Value >= 1 and
			not character.RaceTransformed.Value then
			local be = game:GetService("VirtualInputManager")
			be:SendKeyEvent(true, "Y", false, game)
			task.wait(0.1)
			be:SendKeyEvent(false, "Y", false, game)
		end
	end
end)

local function setupSitPrevention(char)
	local hum = char:WaitForChild("Humanoid")
	if not hum then return end

	hum:GetPropertyChangedSignal("Sit"):Connect(function()
		if hum.Sit then
			task.spawn(function()
				repeat
					task.wait(0.1)
					pcall(function()
						hum:ChangeState(Enum.HumanoidStateType.Jumping)
					end)
				until not hum.Sit or not hum.Parent
			end)
		end
	end)
end

if player.Character then setupSitPrevention(player.Character) end
player.CharacterAdded:Connect(setupSitPrevention)

spawn(function()
	while task.wait(1) do
		if not game.Players.LocalPlayer.Character:FindFirstChild("HasBuso") then
			game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Buso")
		end
	end
end)
